{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"API-Volontaria API to manage volunteer and order in an organisation. Free software : AGPLv3 license Front-end repository : https://github.com/Volontaria/Website-Volontaria Documentation for the project : http://volontaria.readthedocs.io","title":"Home"},{"location":"CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at volontaria@framalistes.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of conduct"},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at volontaria@framalistes.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"CONTRIBUTING/","text":"How to Contribute You can find the full documentation on Readthedocs . The following is a set of guidelines for contributing to the Volontaria API, which is hosted in the Volontaria Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Table Of Contents Code of Conduct Asking Questions Getting Started How Can I Contribute? * Reporting Bugs * Suggesting Enhancements * Your First Code Contribution * Pull Requests Styleguides * Git Commit Messages * Python Styleguide * Documentation Styleguide Additional Notes * Issue and Pull Request Labels Code of Conduct This project and everyone participating in it is governed by the Volontaria Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to volontaria@framalistes.org . Asking Questions Note: Please don't file an issue to ask a question. You'll get faster results by using the resources below. You can join the Volontaria Slack team: Join the Volontaria Slack Team Even though Slack is a chat service, sometimes it takes several hours for community members to respond \u2014 please be patient! Use the #volontaria channel for general questions or discussion about Volontaria Use the #api channel for questions and discussion about the API Use the #website channel for questions and discussion about the front-end There are many other channels available, check the channel list Getting Started First of all, Volontaria is a test-driven project. That means that a test must be written before coding a new feature . Volontaria's issues can be found in the Volontaria Github Page . The issues are also listed on Waffle . Feel free to pick one and start contributing! Don't forget to comment on the issue before you begin to work on it (or assign it to yourself if you're a member of the organization). Before submitting any contribution, you should really read the next sections. Check out the Quickstart document to get you started in no time! Styleguides Git Commit Messages Always write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this: $ git commit -m \"A brief summary of the commit\" \"A paragraph describing what changed and its impact.\" Use the present tense (\"Add feature\" not \"Added feature\") Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\") Limit the first line to 72 characters or less Reference issues and pull requests liberally after the first line Consider starting the commit message with an applicable emoji: :art: :art: when improving the format/structure of the code :racehorse: :racehorse: when improving performance :non-potable_water: :non-potable_water: when plugging memory leaks :memo: :memo: when writing docs :penguin: :penguin: when fixing something on Linux :apple: :apple: when fixing something on macOS :checkered_flag: :checkered_flag: when fixing something on Windows :bug: :bug: when fixing a bug :fire: :fire: when removing code or files :green_heart: :green_heart: when fixing the CI build :white_check_mark: :white_check_mark: when adding tests :lock: :lock: when dealing with security :arrow_up: :arrow_up: when upgrading dependencies :arrow_down: :arrow_down: when downgrading dependencies :shirt: :shirt: when removing linter warnings Python Styleguide All Python must adhere to the PEP8 Styleguide . Start reading our code and you'll get the hang of it. We optimize for readability: We indent using four spaces (soft tabs) We ALWAYS put spaces after list items and method parameters ( [1, 2, 3] , not [1,2,3] ), around operators ( x += 1 , not x+=1 ), and around hash arrows. We end multi-lines lists or dicts with a comma ( mydict = { \"key1\": 1, \"key2\": 2, \"key3\": 3, } and not mydict = { \"key1\": 1, \"key2\": 2, \"key3\": 3 } When initializing an empty variable, use its type constructor mydict = dict() mylist = list() myint = int() mybool = bool() etc. and not mydict = {} mylist = [] etc. This is open source software. Consider the people who will read your code, and make it look nice for them. It's sort of like driving a car: Perhaps you love doing donuts when you're alone, but with passengers the goal is to make the ride as smooth as possible. Additional Notes Issue Labels Label name volontaria \u2011org :mag_right: Description enhancement search Feature requests. backlog search Issue to be addressed later. next search Issue to be addressed for next release. bug search Confirmed bugs or reports that are very likely to be bugs. question search Questions more than bug reports or feature requests (e.g. how do I do X). help-wanted search The Volontaria team would appreciate help from the community in resolving these issues. good first issue search Less complex issues which would be good first issues to work on for users who want to contribute to Volontaria. duplicate search Issues which are duplicates of other issues, i.e. they have been reported before. invalid search Issues which aren't valid (e.g. user errors). DISCLAIMER: This contributing document is highly based on Atom's contributing.md","title":"How to Contribute"},{"location":"CONTRIBUTING/#how-to-contribute","text":"You can find the full documentation on Readthedocs . The following is a set of guidelines for contributing to the Volontaria API, which is hosted in the Volontaria Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.","title":"How to Contribute"},{"location":"CONTRIBUTING/#table-of-contents","text":"Code of Conduct Asking Questions Getting Started How Can I Contribute? * Reporting Bugs * Suggesting Enhancements * Your First Code Contribution * Pull Requests Styleguides * Git Commit Messages * Python Styleguide * Documentation Styleguide Additional Notes * Issue and Pull Request Labels","title":"Table Of Contents"},{"location":"CONTRIBUTING/#code-of-conduct","text":"This project and everyone participating in it is governed by the Volontaria Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to volontaria@framalistes.org .","title":"Code of Conduct"},{"location":"CONTRIBUTING/#asking-questions","text":"Note: Please don't file an issue to ask a question. You'll get faster results by using the resources below. You can join the Volontaria Slack team: Join the Volontaria Slack Team Even though Slack is a chat service, sometimes it takes several hours for community members to respond \u2014 please be patient! Use the #volontaria channel for general questions or discussion about Volontaria Use the #api channel for questions and discussion about the API Use the #website channel for questions and discussion about the front-end There are many other channels available, check the channel list","title":"Asking Questions"},{"location":"CONTRIBUTING/#getting-started","text":"First of all, Volontaria is a test-driven project. That means that a test must be written before coding a new feature . Volontaria's issues can be found in the Volontaria Github Page . The issues are also listed on Waffle . Feel free to pick one and start contributing! Don't forget to comment on the issue before you begin to work on it (or assign it to yourself if you're a member of the organization). Before submitting any contribution, you should really read the next sections. Check out the Quickstart document to get you started in no time!","title":"Getting Started"},{"location":"CONTRIBUTING/#styleguides","text":"","title":"Styleguides"},{"location":"CONTRIBUTING/#git-commit-messages","text":"Always write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this: $ git commit -m \"A brief summary of the commit\" \"A paragraph describing what changed and its impact.\" Use the present tense (\"Add feature\" not \"Added feature\") Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\") Limit the first line to 72 characters or less Reference issues and pull requests liberally after the first line Consider starting the commit message with an applicable emoji: :art: :art: when improving the format/structure of the code :racehorse: :racehorse: when improving performance :non-potable_water: :non-potable_water: when plugging memory leaks :memo: :memo: when writing docs :penguin: :penguin: when fixing something on Linux :apple: :apple: when fixing something on macOS :checkered_flag: :checkered_flag: when fixing something on Windows :bug: :bug: when fixing a bug :fire: :fire: when removing code or files :green_heart: :green_heart: when fixing the CI build :white_check_mark: :white_check_mark: when adding tests :lock: :lock: when dealing with security :arrow_up: :arrow_up: when upgrading dependencies :arrow_down: :arrow_down: when downgrading dependencies :shirt: :shirt: when removing linter warnings","title":"Git Commit Messages"},{"location":"CONTRIBUTING/#python-styleguide","text":"All Python must adhere to the PEP8 Styleguide . Start reading our code and you'll get the hang of it. We optimize for readability: We indent using four spaces (soft tabs) We ALWAYS put spaces after list items and method parameters ( [1, 2, 3] , not [1,2,3] ), around operators ( x += 1 , not x+=1 ), and around hash arrows. We end multi-lines lists or dicts with a comma ( mydict = { \"key1\": 1, \"key2\": 2, \"key3\": 3, } and not mydict = { \"key1\": 1, \"key2\": 2, \"key3\": 3 } When initializing an empty variable, use its type constructor mydict = dict() mylist = list() myint = int() mybool = bool() etc. and not mydict = {} mylist = [] etc. This is open source software. Consider the people who will read your code, and make it look nice for them. It's sort of like driving a car: Perhaps you love doing donuts when you're alone, but with passengers the goal is to make the ride as smooth as possible.","title":"Python Styleguide"},{"location":"CONTRIBUTING/#additional-notes","text":"","title":"Additional Notes"},{"location":"CONTRIBUTING/#issue-labels","text":"Label name volontaria \u2011org :mag_right: Description enhancement search Feature requests. backlog search Issue to be addressed later. next search Issue to be addressed for next release. bug search Confirmed bugs or reports that are very likely to be bugs. question search Questions more than bug reports or feature requests (e.g. how do I do X). help-wanted search The Volontaria team would appreciate help from the community in resolving these issues. good first issue search Less complex issues which would be good first issues to work on for users who want to contribute to Volontaria. duplicate search Issues which are duplicates of other issues, i.e. they have been reported before. invalid search Issues which aren't valid (e.g. user errors). DISCLAIMER: This contributing document is highly based on Atom's contributing.md","title":"Issue  Labels"},{"location":"contributing/code_contribution/","text":"How to contribute to the code ? Tip Don't forget to comment on the issue before you begin to work on it, it allow other contributor to know that somebody already work on it and avoid contributor losing their time by doing the same things. Unsure where to begin contributing to Volontaria? You can start by looking through these good first issue and help-wanted issues: Label name Link Description good first issue search Less complex issues which would be good first issues to work on for users who want to contribute to Volontaria. help-wanted search The Volontaria team would appreciate help to resolving these priorities. enhancement search Feature requests. backlog search Issue to be addressed later. next search Issue to be addressed for next release. bug search Confirmed bugs or reports that are very likely to be bugs. question search Questions more than bug reports or feature requests (e.g. how do I do X). duplicate search Issues which are duplicates of other issues, i.e. they have been reported before. invalid search Issues which aren't valid (e.g. user errors). Pull Requests When you're ready to push your code, please make sure to respect these points: Fill in the automatically generated PR template that will be propose to you during the creation of your PR. Include screenshots and animated GIFs in your pull request whenever possible Follow the code Styleguide Document new code based on the Documentation Styleguide","title":"Contributing to code"},{"location":"contributing/code_contribution/#how-to-contribute-to-the-code","text":"Tip Don't forget to comment on the issue before you begin to work on it, it allow other contributor to know that somebody already work on it and avoid contributor losing their time by doing the same things. Unsure where to begin contributing to Volontaria? You can start by looking through these good first issue and help-wanted issues: Label name Link Description good first issue search Less complex issues which would be good first issues to work on for users who want to contribute to Volontaria. help-wanted search The Volontaria team would appreciate help to resolving these priorities. enhancement search Feature requests. backlog search Issue to be addressed later. next search Issue to be addressed for next release. bug search Confirmed bugs or reports that are very likely to be bugs. question search Questions more than bug reports or feature requests (e.g. how do I do X). duplicate search Issues which are duplicates of other issues, i.e. they have been reported before. invalid search Issues which aren't valid (e.g. user errors).","title":"How to contribute to the code ?"},{"location":"contributing/code_contribution/#pull-requests","text":"When you're ready to push your code, please make sure to respect these points: Fill in the automatically generated PR template that will be propose to you during the creation of your PR. Include screenshots and animated GIFs in your pull request whenever possible Follow the code Styleguide Document new code based on the Documentation Styleguide","title":"Pull Requests"},{"location":"contributing/how_to_find_help/","text":"How to find some help ? If you want to discuss some points or if you need some helps to begin to contribute, do not hesitate to communicate with the community. You can Join the Volontaria Slack team: Use the #volontaria channel for general questions or discussion about Volontaria Use the #api channel for questions and discussion about the API Use the #website channel for questions and discussion about the front-end There are many other channels available, check the channel list","title":"How to find help"},{"location":"contributing/how_to_find_help/#how-to-find-some-help","text":"If you want to discuss some points or if you need some helps to begin to contribute, do not hesitate to communicate with the community. You can Join the Volontaria Slack team: Use the #volontaria channel for general questions or discussion about Volontaria Use the #api channel for questions and discussion about the API Use the #website channel for questions and discussion about the front-end There are many other channels available, check the channel list","title":"How to find some help ?"},{"location":"contributing/reporting_bug/","text":"Reporting Bugs This section guides you through submitting a bug report for Volontaria. Following these guidelines helps maintainers and the community understand your report, reproduce the behavior, and find related reports. Before creating bug reports, please check this list as you might find out that you don't need to create one. When you are creating a bug report, please include as many details as possible . Fill out the required template , the information it asks for helps us resolve issues faster. Tip If you find a Closed issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one. How Do I Submit A (Good) Bug Report? Bugs are tracked as GitHub issues . Create an issue on the repository and fill in the template automatically generated in the issue text box. Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. When listing steps, don't just say what you did, but explain how you did it . Provide specific examples to demonstrate the steps . Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks . Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. If the problem wasn't triggered by a specific action , describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: What's the name and version of the OS you're using ? Are you running in a virtual machine? If so, which VM software are you using and which operating systems and versions are used for the host and the guest? Which keyboard layout are you using? Are you using a US layout or some other layout?","title":"Reporting bug"},{"location":"contributing/reporting_bug/#reporting-bugs","text":"This section guides you through submitting a bug report for Volontaria. Following these guidelines helps maintainers and the community understand your report, reproduce the behavior, and find related reports. Before creating bug reports, please check this list as you might find out that you don't need to create one. When you are creating a bug report, please include as many details as possible . Fill out the required template , the information it asks for helps us resolve issues faster. Tip If you find a Closed issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one.","title":"Reporting Bugs"},{"location":"contributing/reporting_bug/#how-do-i-submit-a-good-bug-report","text":"Bugs are tracked as GitHub issues . Create an issue on the repository and fill in the template automatically generated in the issue text box. Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. When listing steps, don't just say what you did, but explain how you did it . Provide specific examples to demonstrate the steps . Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks . Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. If the problem wasn't triggered by a specific action , describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: What's the name and version of the OS you're using ? Are you running in a virtual machine? If so, which VM software are you using and which operating systems and versions are used for the host and the guest? Which keyboard layout are you using? Are you using a US layout or some other layout?","title":"How Do I Submit A (Good) Bug Report?"},{"location":"contributing/style_guide/","text":"Styleguides This is open source software. Consider the people who will read your code, and make it look nice for them. general good practice Name your variable properly to keep the code readable and avoid variable name like: var , i , object , temp . If the part of code you write have no performance problem please favor readability over performance. Try to avoid too long function or class and to split the logic into subset easy to reuse by other contributors. Git Commit Messages Limit the first line to 72 characters or less Always write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this: $ git commit -m \"A brief summary of the commit\" \"A paragraph describing what changed and its impact.\" Reference issues and pull requests liberally after the first line Consider starting the commit message with an applicable emoji: Python Styleguide All Python code must adhere to the PEP8 Styleguide .","title":"Style guide"},{"location":"contributing/style_guide/#styleguides","text":"This is open source software. Consider the people who will read your code, and make it look nice for them.","title":"Styleguides"},{"location":"contributing/style_guide/#general-good-practice","text":"Name your variable properly to keep the code readable and avoid variable name like: var , i , object , temp . If the part of code you write have no performance problem please favor readability over performance. Try to avoid too long function or class and to split the logic into subset easy to reuse by other contributors.","title":"general good practice"},{"location":"contributing/style_guide/#git-commit-messages","text":"Limit the first line to 72 characters or less Always write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this: $ git commit -m \"A brief summary of the commit\" \"A paragraph describing what changed and its impact.\" Reference issues and pull requests liberally after the first line Consider starting the commit message with an applicable emoji:","title":"Git Commit Messages"},{"location":"contributing/style_guide/#python-styleguide","text":"All Python code must adhere to the PEP8 Styleguide .","title":"Python Styleguide"},{"location":"contributing/suggesting_enhancement/","text":"Suggesting Enhancements Info Enhancement suggestions are tracked in Volontaria's Feathub page . Feathub allow people to propose enhancement and to vote for the enhancement they want see first. The enhancement made on Volontaria will be based on the most requested feature on Feathub and on the contribution of the community. This section guides you through submitting an enhancement suggestion for Volontaria, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion and find related suggestions. Before submitting a suggestion, be sure to check these things first: Verify if the same suggestion has already been created on Feathub so that you do not create a duplicate. If a suggestion similar to yours , comment on the existing suggestion instead of creating a new one. How Do I Submit A (Good) Enhancement Suggestion? Use a clear and descriptive title for the issue to identify the suggestion. Describe clearly your idea and do not hesitate to add link or example to help other people understand your point. Explain why this enhancement would be useful to most Volontaria users.","title":"Suggesting enhancement"},{"location":"contributing/suggesting_enhancement/#suggesting-enhancements","text":"Info Enhancement suggestions are tracked in Volontaria's Feathub page . Feathub allow people to propose enhancement and to vote for the enhancement they want see first. The enhancement made on Volontaria will be based on the most requested feature on Feathub and on the contribution of the community. This section guides you through submitting an enhancement suggestion for Volontaria, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion and find related suggestions. Before submitting a suggestion, be sure to check these things first: Verify if the same suggestion has already been created on Feathub so that you do not create a duplicate. If a suggestion similar to yours , comment on the existing suggestion instead of creating a new one.","title":"Suggesting Enhancements"},{"location":"contributing/suggesting_enhancement/#how-do-i-submit-a-good-enhancement-suggestion","text":"Use a clear and descriptive title for the issue to identify the suggestion. Describe clearly your idea and do not hesitate to add link or example to help other people understand your point. Explain why this enhancement would be useful to most Volontaria users.","title":"How Do I Submit A (Good) Enhancement Suggestion?"},{"location":"getting_started/docker/","text":"Getting started with Docker Prerequisites Docker Initialize the project One command only will allow you to initialize the database, run the migration on it, configure you API, launch your documentation website and allow you to begin use the project: docker-compose up Warning This step can take some time on first launch but you should see periodic message to inform you that the work is in progress. Breathe in, breathe out, have a coffee and come back in 2-3 minutes Create super admin Since you don't have user the first time you launch the API you will need to execute this command in a separate terminal. docker-compose run api python source/apiVolontaria/manage.py createsuperuser Tip If you try to understand this command you can see that we ask docker-compose to run a command on the api image that represent our API in the docker-compose.yml . The command is python source/apiVolontaria/manage.py createsuperuser , the default Django command to create a new superuser. With this technique you can execute other Django commands like migrate , makemigrations , makemessages or even custom command you create to automatise your tasks. Configurations If you want to modify some settings of your Docker image you can just overwrite your .env.docker file with the ENV variable that you want. Differents Django settings are based on ENV variables as you can see in source/apiVolontaria/apiVolontaria/settings.py Danger Take care to not push your confidentials credentials when you push code to our repository or on your open-source forks. You can review your change by using git diff before committing your change. Danger Try to always use python-decouple to manage your settings and to not directly edit the settings.py . Using the services You can now visit these links to validate the installation: The root of the API (will need authentication as a first step): http://localhost:8000/ The admin site: http://localhost:8000/admin/ The documentation you're reading: http://localhost:8001/ Do not hesitate to check the API section of this documentation to know how to authenticate yourself with the API and begin asking queries.","title":"Install with Docker"},{"location":"getting_started/docker/#getting-started-with-docker","text":"","title":"Getting started with Docker"},{"location":"getting_started/docker/#prerequisites","text":"Docker","title":"Prerequisites"},{"location":"getting_started/docker/#initialize-the-project","text":"One command only will allow you to initialize the database, run the migration on it, configure you API, launch your documentation website and allow you to begin use the project: docker-compose up Warning This step can take some time on first launch but you should see periodic message to inform you that the work is in progress. Breathe in, breathe out, have a coffee and come back in 2-3 minutes","title":"Initialize the project"},{"location":"getting_started/docker/#create-super-admin","text":"Since you don't have user the first time you launch the API you will need to execute this command in a separate terminal. docker-compose run api python source/apiVolontaria/manage.py createsuperuser Tip If you try to understand this command you can see that we ask docker-compose to run a command on the api image that represent our API in the docker-compose.yml . The command is python source/apiVolontaria/manage.py createsuperuser , the default Django command to create a new superuser. With this technique you can execute other Django commands like migrate , makemigrations , makemessages or even custom command you create to automatise your tasks.","title":"Create super admin"},{"location":"getting_started/docker/#configurations","text":"If you want to modify some settings of your Docker image you can just overwrite your .env.docker file with the ENV variable that you want. Differents Django settings are based on ENV variables as you can see in source/apiVolontaria/apiVolontaria/settings.py Danger Take care to not push your confidentials credentials when you push code to our repository or on your open-source forks. You can review your change by using git diff before committing your change. Danger Try to always use python-decouple to manage your settings and to not directly edit the settings.py .","title":"Configurations"},{"location":"getting_started/docker/#using-the-services","text":"You can now visit these links to validate the installation: The root of the API (will need authentication as a first step): http://localhost:8000/ The admin site: http://localhost:8000/admin/ The documentation you're reading: http://localhost:8001/ Do not hesitate to check the API section of this documentation to know how to authenticate yourself with the API and begin asking queries.","title":"Using the services"},{"location":"getting_started/virtualenv/","text":"Getting started with manual installation We're going to install and configure a basic instance of this API Clone the project The project use Git and is accessible on Github . First of all you need to clone the project on your computer. To contribute on this repository, use a fork: git clone https://github.com/your_github_username/API-Volontaria.git To just use the API (to contribute on the frontend repository for example): git clone https://github.com/Volontaria/API-Volontaria.git Create a virtual environment Virtualenv provide isolated Python environments, which are more practical than installing packages systemwide. They also allow installing packages without administrator privileges. Create a new virtual environment virtualenv env Active the virtual environment . env/bin/activate You need to ensure the virtual environment is active each time you want to launch the project. Install all requirements All requirements used by this projects are documented inside the requirements.txt file at the root of the repository. You can install all requirements needed by just one commandline. WARNING : Make sure your virtual environment is active or you will install all these packages systemwide. pip install -r requirements.txt Configure the database Django have a system of database migration, you need to apply all migrations of the project on your database to have the right data schema. python source/apiVolontaria/manage.py migrate By default this repository work with a Sqlite3 database which is a technology using a simple file in place of a server. You can change this config in source/apiVolontaria/apiVolontaria/local_settings.py . Test the installation At the beginning of this step you have a functional local setup. You can control it with the embedded web-server. python source/apiVolontaria/manage.py runserver You can now visit the homepage to validate the installation. http://localhost:8000/ Create an administrator You will need an administrator to: Access the django admin panel http://localhost:8000/admin Access the admin panel of the frontend To create an administrator, just use this command line and respond to some questions. python source/apiVolontaria/manage.py createsuperuser Custom settings If you need to have custom settings on your local environment, you can override global settings in source/apiVolontaria/apiVolontaria/local_settings.py .","title":"Install manually"},{"location":"getting_started/virtualenv/#getting-started-with-manual-installation","text":"We're going to install and configure a basic instance of this API","title":"Getting started with manual installation"},{"location":"getting_started/virtualenv/#clone-the-project","text":"The project use Git and is accessible on Github . First of all you need to clone the project on your computer. To contribute on this repository, use a fork: git clone https://github.com/your_github_username/API-Volontaria.git To just use the API (to contribute on the frontend repository for example): git clone https://github.com/Volontaria/API-Volontaria.git","title":"Clone the project"},{"location":"getting_started/virtualenv/#create-a-virtual-environment","text":"Virtualenv provide isolated Python environments, which are more practical than installing packages systemwide. They also allow installing packages without administrator privileges. Create a new virtual environment virtualenv env Active the virtual environment . env/bin/activate You need to ensure the virtual environment is active each time you want to launch the project.","title":"Create a virtual environment"},{"location":"getting_started/virtualenv/#install-all-requirements","text":"All requirements used by this projects are documented inside the requirements.txt file at the root of the repository. You can install all requirements needed by just one commandline. WARNING : Make sure your virtual environment is active or you will install all these packages systemwide. pip install -r requirements.txt","title":"Install all requirements"},{"location":"getting_started/virtualenv/#configure-the-database","text":"Django have a system of database migration, you need to apply all migrations of the project on your database to have the right data schema. python source/apiVolontaria/manage.py migrate By default this repository work with a Sqlite3 database which is a technology using a simple file in place of a server. You can change this config in source/apiVolontaria/apiVolontaria/local_settings.py .","title":"Configure the database"},{"location":"getting_started/virtualenv/#test-the-installation","text":"At the beginning of this step you have a functional local setup. You can control it with the embedded web-server. python source/apiVolontaria/manage.py runserver You can now visit the homepage to validate the installation. http://localhost:8000/","title":"Test the installation"},{"location":"getting_started/virtualenv/#create-an-administrator","text":"You will need an administrator to: Access the django admin panel http://localhost:8000/admin Access the admin panel of the frontend To create an administrator, just use this command line and respond to some questions. python source/apiVolontaria/manage.py createsuperuser","title":"Create an administrator"},{"location":"getting_started/virtualenv/#custom-settings","text":"If you need to have custom settings on your local environment, you can override global settings in source/apiVolontaria/apiVolontaria/local_settings.py .","title":"Custom settings"}]}