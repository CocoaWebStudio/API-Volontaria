"""
Django settings for apiVolontaria project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from django.utils.translation import ugettext_lazy as _
from pathlib import Path
from decouple import config, Csv
from dj_database_url import parse as db_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).absolute().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost', cast=Csv())

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_docs',
    'rest_framework.authtoken',
    'corsheaders',
    'apiVolontaria',
    'volunteer',
    'location',
    'pages',
    'ckeditor_api',
    'log_management',
    'import_export',
    'anymail',
    'orderable',
    'ckeditor',
    'reversion',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'apiVolontaria.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR.joinpath('/apiVolontaria/templates/')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apiVolontaria.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': config(
        'DATABASE_URL',
        default='sqlite:///' + str(BASE_DIR.joinpath('db.sqlite3')),
        cast=db_url
    )
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.'
                'auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.'
                'auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.'
                'auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.'
                'password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Local path
LOCALE_PATHS = (
    'apiVolontaria/locale',
    'location/locale',
    'order/locale',
    'volunteer/locale',
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = config('STATIC_URL', default='/static/')
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static')

MEDIA_URL = config('MEDIA_URL', default='/media/')
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'media')

# Django Rest Framework

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'apiVolontaria.authentication.TemporaryTokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.'
                                'LimitOffsetPagination',
    'PAGE_SIZE': 100
}


# CORS Header Django Rest Framework

CORS_ORIGIN_ALLOW_ALL = config(
    'CORS_ORIGIN_ALLOW_ALL',
    default=True,
    cast=bool,
)


# Temporary Token

REST_FRAMEWORK_TEMPORARY_TOKENS = {
    'MINUTES': config(
        'TEMPORARY_TOKEN_MINUTES',
        default=30,
        cast=int,
    ),
    'RENEW_ON_SUCCESS': config(
        'TEMPORARY_TOKEN_RENEW_ON_SUCCESS',
        default=True,
        cast=bool,
    ),
    'USE_AUTHENTICATION_BACKENDS': config(
        'USE_AUTHENTICATION_BACKENDS',
        default=False,
        cast=bool,
    ),
}

# Activation Token

ACTIVATION_TOKENS = {
    'MINUTES': config(
        'ACTIVATION_TOKENS_MINUTES',
        default=1440,
        cast=int,
    ),
}

# Email service configuration (using Anymail).
# Refer to Anymail's documentation for configuration details.

ANYMAIL = {
    'SENDINBLUE_API_KEY': config(
        'SENDINBLUE_API_KEY',
        default='example_key',
    ),
    'TEMPLATES': {
        'CONFIRM_SIGN_UP': config(
            'CONFIRM_SIGN_UP',
            default='0',
            cast=int,
        ),
        'FORGOT_PASSWORD': config(
            'FORGOT_PASSWORD',
            default='0',
            cast=int,
        ),
    },
}
EMAIL_BACKEND = config(
    'EMAIL_BACKEND',
    default='anymail.backends.sendinblue.EmailBackend',
)

# This 'FROM' email is not used with SendInBlue templates
DEFAULT_FROM_EMAIL = config(
    'DEFAULT_FROM_EMAIL',
    default='noreply@example.org',
)

# These settings are not related to the core API functionality. Feel free to
# edit them to your needs.
# NOTE: "{{token}}" is a placeholder for the real activation token. It will be
#       dynamically replaced by the real "token".
CONSTANT = {
    "ORGANIZATION":  config(
        'ORGANIZATION',
        default='Volontaria',
    ),
    "EMAIL_SERVICE": config(
        'EMAIL_SERVICE',
        default=False,
        cast=bool,
    ),
    "AUTO_ACTIVATE_USER": config(
        'AUTO_ACTIVATE_USER',
        default=False,
        cast=bool,
    ),
    "FRONTEND_INTEGRATION": {
        'ACTIVATION_URL': config(
            'ACTIVATION_URL',
            default='https://example.com/activate/{{token}}',
        ),
         'FORGOT_PASSWORD_URL': config(
            'FORGOT_PASSWORD_URL',
            default='https://example.com/reset-password/{{token}}',
        ),
    },
}


try:
    from apiVolontaria.local_settings import *
except ImportError:
    pass
